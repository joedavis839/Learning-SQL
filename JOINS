/*
joins are the SQL tool that allow us to construct a relationship between objects
a join shows a result set, containing fields derived from two or more tables
the idea is 
-We must find a related column from the two tables that contains the same type of data
-We will be free to add columns from these two tables to our output
Remember
-The columns you use to relate tables must represent the same object, such as id
-The tables you are considering need not be logically adjacent (from the data map)
*/

Select * from departments_dup;

Alter table departments_dup
DROP column dept_manager;

Alter table departments_dup
Change Column dept_no dept_no char(4) null;

Alter table departments_dup
Change Column dept_name dept_name varchar(40) null;

Insert into departments_dup (dept_name)
	Values ('Public Relations');

Delete from departments_dup
WHERE
	dept_no = 'd002';
    
Insert into departments_dup (dept_no)
	Values ('d010'), ('d011')
    ;
Delete from departments_dup
WHERE
	dept_no = 'd010';
    

DROP TABLE IF EXISTS dept_manager_dup;
CREATE TABLE dept_manager_dup (
	emp_no int(11) NOT NULL,
    dept_no char(4) NULL,
    from_date date NOT NULL,
    to_date date NULL
    );
    
INSERT INTO dept_manager_dup
select * from dept_manager;

INSERT INTO dept_manager_dup (emp_no, from_date)
VALUES
	(999904, '2017-01-01'),
    (999905, '2017-01-01'),
	(999906, '2017-01-01'),
	(999907, '2017-01-01');

DELETE FROM dept_manager_dup
	WHERE
    dept_no = 'd0001';
    
INSERT INTO departments_dup (dept_name)
VALUES ('Public Relations');

DELETE FROM departments_dup
WHERE
	dept_no = 'd002';
    

SELECT * From dept_manager_dup;

/*
INNER JOIN
can help us extract the result set, which is the similar columns between tables - they are the matching values or matching records
non-matching values=non-matching records
*/

Select
	*
FROM
	dept_manager_dup
ORDER BY dept_no;

Select
	*
FROM
	departments_dup
ORDER BY dept_no;

/*
JOIN SYNTAX
SELECT
	table_1.column_name(s), table_2.column_name(s)
FROM
	table_1
JOIN
	table_2 ON table_1.column_name = table_2.column_name;
    
to help keep the query shorter we can use an alias (note the word AS isn't used)
example

SELECT
	t1.column_name, t1.column_name, ..., t2.column_name, ...
FROM
	table_1 t1
JOIN
	table_2 t2 ON t1.column_name = t2.column_name;

*/

SELECT
	m.dept_no, m.emp_no, d.dept_name
FROM
	dept_manager_dup m
INNER JOIN
	departments_dup d ON m.dept_no = d.dept_no
ORDER BY m.dept_no;

/*
INNER JOINS extract only records in which the values in the realted columns match
null values, or values appearing in just one of the two tables and no appearing in the other, are no displayed
*/

SELECT
	*
FROM
	employees;
    
SELECT
	e.emp_no, e.first_name, e.last_name, m.dept_no, e.hire_date
FROM
	employees e
INNER JOIN
	dept_manager m ON e.emp_no = m.emp_no;
    
SELECT
	m.dept_no, m.emp_no, m.from_date, m.to_date, d.dept_name
FROM
	dept_manager_dup m
INNER JOIN
	departments_dup d ON m.dept_no = d.dept_no
ORDER BY m.dept_no;

/*
INNER JOIN and JOIN will both work
just use JOIN from here on out
*/

/*
Duplicate records, also known as duplicate rows, are identical rows in an SQL table
-for a pair of duplicate records, the values in each row coincide
these are not always allowed in a database or a data table
- they are somtimes encoutered, especially in new, raw, or uncontrolled data
*/

INSERT INTO dept_manager_dup
VALUES ('110228', 'd003', '1992-03-21', '9999-01-01');

INSERT INTO departments_dup
VALUES ('d009', 'Customer Service');

SELECT
	*
FROM
	dept_manager_dup
ORDER BY dept_no ASC;

SELECT
	*
FROM
	departments_dup
ORDER BY dept_no ASC;

/*
if you don't want to see duplicate rows or you aren't supposed to have them use
GROUP BY the field that differs most among records
*/

SELECT
	m.dept_no, m.emp_no, d.dept_name
FROM
	dept_manager_dup m
INNER JOIN
	departments_dup d ON m.dept_no = d.dept_no
GROUP BY m.emp_no
ORDER BY m.dept_no;

/*
LEFT JOIN
returns all matching values of the two tables + all values from the left table that match no values from the right table
*/

DELETE FROM dept_manager_dup
WHERE emp_no = '110228';

DELETE FROM departments_dup
WHERE dept_no = 'd009';

INSERT INTO dept_manager_dup
VALUES ('110228', 'd003', '1992-03-21', '9999-01-01');

INSERT INTO departments_dup
VALUES ('d009', 'Customer Service');

SELECT
	m.dept_no, m.emp_no, d.dept_name
FROM
	dept_manager_dup m
		LEFT JOIN
	departments_dup d ON m.dept_no = d.dept_no
GROUP BY m.emp_no
ORDER BY m.dept_no;

/*
LEFT JOIN
when working with left joins, the order in which you join tables matters
*/

SELECT
	d.dept_no, m.emp_no, d.dept_name
FROM
	departments_dup d
		LEFT JOIN
	dept_manager_dup m ON m.dept_no = d.dept_no
ORDER BY d.dept_no;

/*
COULD ALSO use OUTER JOIN because the result is on the outter part of the venn diagram, and it would give the same output
LEFT JOIN is always an outter join
left joins can deliver a list with all records from the left table that do no match any rows form the right table
*/

SELECT
	m.dept_no, m.emp_no, d.dept_name
FROM
	dept_manager_dup m
		LEFT JOIN
	departments_dup d ON m.dept_no = d.dept_no
WHERE
    dept_name IS NULL
ORDER BY m.dept_no;

SELECT
	e.emp_no, e.first_name, e.last_name, dm.dept_no, dm.from_date
FROM
	employees e
	LEFT JOIN
	dept_manager dm ON e.emp_no = dm.emp_no
WHERE
	e.last_name = 'Markovitch'
ORDER BY
	dm.dept_no desc, e.emp_no;


/*
RIGHT JOIN
their functionality is identical to LEFT JOINs, with the only difference being that the direction of the operation is inverted
*/

SELECT
	d.dept_no, m.emp_no, d.dept_name
FROM
	dept_manager_dup m
		RIGHT JOIN
	departments_dup d ON m.dept_no = d.dept_no
ORDER BY d.dept_no;

/*
matching column = linking column
when applying a right join, all records from the right table will be included in the result set
values from the left table will be included only if their linking column contains a value coinciding,
or matching, with a value from the linking column of the right table

LEFT and RIGHT JOINS are pervfect examples of one-to-many relationships
*/

SELECT
	m.dept_no, m.emp_no, d.dept_name
FROM
	dept_manager_dup m
		INNER JOIN
	departments_dup d ON m.dept_no = d.dept_no
ORDER BY m.dept_no;


SELECT
	e.emp_no,
    e.first_name,
    e.last_name,
    e.hire_date,
    dm.dept_no
FROM
	employees e,
    dept_manager dm
WHERE
	e.emp_no = dm.emp_no
ORDER BY emp_no;



SELECT
	dm.emp_no, e.hire_date, dm.dept_no, e.first_name, e.last_name
FROM
	dept_manager dm
		INNER JOIN
	employees e ON dm.emp_no = e.emp_no
ORDER BY dm.emp_no;

/*
JOIN + WHERE
JOIN: used for connecting the "employees" and "salaries" tables
WHERE: used to define the condition or conditions that will determine which willl be the connecting points between the two tables
*/

SELECT
	e.emp_no, e.first_name, e.last_name, s.salary
FROM
	employees e
		INNER JOIN
	salaries s ON s.emp_no = e.emp_no
WHERE
	s.salary > 145000;
    

set @@global.sql_mode := replace (@@global.sql_mode, 'ONLY_FULL_GROUP_BY', ' ');


SELECT
	e.first_name, e.last_name, e.hire_date, t.title
FROM
	employees e
    JOIN
    titles t ON e.emp_no=t.emp_no
WHERE
	first_name = 'Margareta' AND last_name = 'Markovitch'
ORDER BY
	e.emp_no desc;
    
/*
CROSS JOIN
-will take the values from a certain table and connect them with all the values from the tables we want to join it with
differenet from INNER JOIN which wants to connect matching values

CROSS JOIN 	- connect all the values, not just those that match
			- the Cartesian product of the values of two or more sets
            - particularly useful when the tables in a database are not well connected
*/

SELECT
	dm.*, d.*
FROM
	dept_manager dm
    CROSS JOIN
    departments d
ORDER BY dm.emp_no , d.dept_no;

SELECT
	dm.*, d.*
FROM
	dept_manager dm,
    departments d
ORDER BY dm.emp_no , d.dept_no;


SELECT
	dm.*, d.*
FROM
	dept_manager dm
	JOIN
    departments d
ORDER BY dm.emp_no , d.dept_no;


SELECT
	dm.*, d.*
FROM
	dept_manager dm
	JOIN
    departments d
ORDER BY dm.emp_no , d.dept_no;


SELECT
	dm.*, d.*
FROM
	dept_manager dm
	CROSS JOIN
    departments d
WHERE d.dept_no <> dm.dept_no
ORDER BY dm.emp_no , d.dept_no;

/*
This showed that we can use a JOIN + ON clause interchangeably with a CROSS JOIN + WHERE clause

Its possible to crossjoin multiple tables but be careful as this data set may be too large

*/

SELECT
	e.*, d.*
FROM
	departments d
		CROSS JOIN
    dept_manager dm
		JOIN
	employees e ON e.emp_no = dm.emp_no
WHERE d.dept_no <> dm.dept_no
ORDER BY dm.emp_no , d.dept_no;

SELECT
	d.*, dm.*
FROM
	dept_manager dm
		CROSS JOIN
	departments d
WHERE
	d.dept_no = 'd009'
ORDER BY
	d.dept_no;
    
   

SELECT
	e.*, d.*
FROM
	employees e
		CROSS JOIN
	departments d
WHERE
	e.emp_no < 10011
ORDER BY
	e.emp_no, d.dept_name
    ;
    

/*
you can use aggregate functions in conjunction with join statements
do not put the linking field connecting the two tables in the select statement
*/


SELECT
	e.gender, AVG(s.salary) AS average_salary
FROM
	employees e
		JOIN
	salaries s ON e.emp_no = s.emp_no
GROUP BY gender;


/*
JOIN allows you to join multiple tables
-when creating a query that joins mulitple tables, you must back it with strong intuition and a crystal-clear
idea of how you would like the tables to be connected
*/

SELECT
	e.first_name,
    e.last_name,
    e.hire_date,
    dm.from_date,
    d.dept_no
FROM
	employees e
		JOIN
	dept_manager dm ON e.emp_no = dm.emp_no
		JOIN
	departments d ON dm.dept_no = d.dept_no;
    
/*
can also use left and right joins and such together
*/

SELECT
	e.first_name, 
    e.last_name, 
    e.hire_date, 
    t.title,
    dm.from_date,
    d.dept_name
FROM
	departments d
		JOIN
	dept_manager dm ON dm.dept_no = d.dept_no
		JOIN
	employees e ON e.emp_no = dm.emp_no
		JOIN
	titles t ON e.emp_no = t.emp_no
WHERE
	t.title = 'Manager'
ORDER BY
	first_name asc;
    
    
/*
for this problem we will find all the departments managers and see their average salary
One should look for key columns, which are common between the tables involved in the analysis and are necessary
to solve the task at hand
These columns don't need to be foreign or private keys
*/

SELECT
	d.dept_name, AVG(s.salary) AS Average_Salary
FROM
	departments d
		JOIN
	dept_manager dm ON dm.dept_no = d.dept_no
		JOIN
	salaries s ON dm.emp_no = s.emp_no
GROUP BY
	d.dept_name
ORDER BY 
	Average_Salary desc
;
    
SELECT
	d.dept_name, AVG(s.salary) AS Average_Salary
FROM
	departments d
		JOIN
	dept_manager dm ON dm.dept_no = d.dept_no
		JOIN
	salaries s ON dm.emp_no = s.emp_no
GROUP BY
	d.dept_name
HAVING Average_Salary > 60000
ORDER BY 
	Average_Salary desc
;    
    
SELECT
	e.gender, COUNT(dm.emp_no) AS NUMBER_OF_MANAGERS
FROM
	employees e
		JOIN
	dept_manager dm ON dm.emp_no = e.emp_no
GROUP BY
	e.gender;
    
    
/*
UNION vs. UNION ALL
UNION ALL 	- used to combine a few SELECT statements ina single output
			- you can think of it as a tool that allows you to unify tables
            
Syntax

SELECT
	N columns
FROM
	table_1
UNION ALL SELECT
	N columns
FROM
	table_2;

We have to select the same number of columns from each table
These columns should have the same name, should be in the same order, and shoud contain related data types

*/
DROP TABLE IF EXISTS employees_dup;

CREATE TABLE employees_dup (
	emp_no int(11),
    birth_date date,
    first_name varchar(14),
    last_name varchar (16),
    gender enum('M', 'F'),
    hire_date date
)
;

    
INSERT INTO employees_dup
SELECT
	e.*
FROM
	employees e
LIMIT
	20;
    
SELECT
	*
FROM
	employees_dup;
    
    
INSERT INTO employees_dup VALUES
('10001', '1953-09-02', 'Georgi', 'Facello', 'M', '1986-06-26');


/*we want to join dept_manager and employees together
but they don't contain the same name of columns and such
so we will add the missing columns to each table
*/

SELECT
	e.emp_no,
    e.first_name,
    e.last_name,
    NULL AS dept_no,
    NULL AS from_date
FROM
	employees_dup e
WHERE
    e.emp_no = 10001
UNION SELECT
	NULL AS emp_no,
    NULL AS first_name,
    NULL AS last_name,
    m.dept_no,
    m.from_date
FROM
	dept_manager m;
    
/*
UNION displays only distinct values in the output
	-uses more MySQL resources (computational power and storage space)
UNION ALL retrieves the duplicates as well
*/


SELECT
	*
FROM
	(SELECT
	e.emp_no,
    e.first_name,
    e.last_name,
    NULL AS dept_no,
    NULL AS from_date
FROM
	employees e
WHERE
	last_name = 'Denis'
UNION SELECT
	NULL AS emp_no,
    NULL AS first_name,
    NULL AS last_name,
    dm.dept_no,
    dm.from_date
FROM
	dept_manager dm) as a 
    ORDER BY -a.emp_no DESC;
