/*
SUBQUERIES - queries embedded in of other queries
also called inner queries or nested queries or inner select
the query they are in is called the outer query or outer select
often the subquery is placed in the WHERE clause of a select statement
-always put subqueries in parentheses
*/

SELECT
	*
FROM
	dept_manager;
    
SELECT
	e.first_name, e.last_name
FROM
	employees e
WHERE
	e.emp_no IN (SELECT
			dm.emp_no
		FROM
			dept_manager dm);	
/*
just to prove that the subquery is its own query
*/

(SELECT
			dm.emp_no
		FROM
			dept_manager dm);	
/*
a subquery may return a single value (a scalar), a single row, a single column, or an entire table
you can have a lot more than one subquery in your outer query
it is possibloe to nest inner queries within other inner queries
*/

SELECT
	*
FROM
	dept_manager
WHERE
	emp_no IN (SELECT
		e.emp_no
			FROM
				employees e
			WHERE
				hire_date BETWEEN '1990-01-01' AND '1995-01-01');
                
/*
EXISTS operator
checks whether certain row values are found within a subquery
-this check is conducted row by row
-returns a Boolean value
if a row value of asubquery exists -> true -> the corresponding record of the outer query is extracted
if a row value of a subquery doesn't exist -> false -> no row value from the outer query is extracted
*/


SELECT
	e.first_name, e.last_name
FROM
	employees e
WHERE
	EXISTS( SELECT
				*
			FROM
				dept_manager dm
			WHERE
				dm.emp_no = e.emp_no);
       
       
/*
EXISTS and IN are very similar in subqueries, there differences are below
EXISTS
- tests row values for existence
-quicker in retrieving large amounts of data

IN
- searches among value
-faster with smaller data sets

Finally try to put your ORDER BY clause as part of the outter query
*/
       
SELECT
	e.first_name, e.last_name
FROM
	employees e
WHERE
	EXISTS( SELECT
				*
			FROM
				dept_manager dm
			WHERE
				dm.emp_no = e.emp_no)
ORDER BY emp_no;


/*
subqueries aren't always the best but they're useful for
better structuring of the outer query
	thus, each inner query can be throught of in isolation
    hence the name of SQL - structured query language
in some situations, the use of subqueries is much more intuitive compared to the use of complex joins and unions
many users prefer subqueries simply because they offer enhanced code readability
*/


SELECT
	*
FROM
	employees e
WHERE
EXISTS	(SELECT
			*
		FROM
			titles t
		WHERE
			t.emp_no = e.emp_no AND
			t.title = 'Assistant Engineer');
                    
                    
       
/*
SQL subqueries nest in SELECT and FROM statments
they can basically be put anywhere in a query
*/
       
SELECT
	emp_no
FROM
	dept_manager
WHERE
	emp_no = 1110022;
    
/*
We want to assign employee number 110022 as a manager to all employees from 10001 to 10020,
and employee number 110039 as a manager to all employees from 10021 to 10040
*/
SELECT 
    A.*
FROM
    (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = 110022) AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no <= 10020
    GROUP BY e.emp_no
    ORDER BY e.emp_no) AS A 
UNION SELECT 
    B.*
FROM
    (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = 110039) AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no > 10020
    GROUP BY e.emp_no
    ORDER BY e.emp_no
    LIMIT 20) AS B
;       
       
DROP TABLE IF EXISTS emp_manager;

CREATE table emp_manager
	(emp_no INT(11) NOT NULL,
    dept_no CHAR(4) NULL,
    manager_no INT(11) NOT NULL)
;

INSERT INTO emp_manager
SELECT 
    u.*
FROM
    (SELECT 
        a.*
    FROM
        (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = 110022) AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no <= 10020
    GROUP BY e.emp_no
    ORDER BY e.emp_no) AS a UNION SELECT 
        b.*
    FROM
        (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = 110039) AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no > 10020
    GROUP BY e.emp_no
    ORDER BY e.emp_no
    LIMIT 20) AS b UNION SELECT 
        c.*
    FROM
        (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = 110039) AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no = 110022
    GROUP BY e.emp_no) AS c UNION SELECT 
        d.*
    FROM
        (SELECT 
        e.emp_no AS employee_ID,
            MIN(de.dept_no) AS department_code,
            (SELECT 
                    emp_no
                FROM
                    dept_manager
                WHERE
                    emp_no = 110022) AS manager_ID
    FROM
        employees e
    JOIN dept_emp de ON e.emp_no = de.emp_no
    WHERE
        e.emp_no = 110039
    GROUP BY e.emp_no) AS d) as u;
